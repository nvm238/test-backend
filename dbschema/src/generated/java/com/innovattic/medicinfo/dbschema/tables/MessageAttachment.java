/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.database.dto.AttachmentType;
import com.innovattic.medicinfo.database.generator.AttachmentTypeConverter;
import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.MessageAttachmentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageAttachment extends TableImpl<MessageAttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message_attachment</code>
     */
    public static final MessageAttachment MESSAGE_ATTACHMENT = new MessageAttachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageAttachmentRecord> getRecordType() {
        return MessageAttachmentRecord.class;
    }

    /**
     * The column <code>public.message_attachment.id</code>.
     */
    public final TableField<MessageAttachmentRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.message_attachment.public_id</code>.
     */
    public final TableField<MessageAttachmentRecord, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.message_attachment.created</code>.
     */
    public final TableField<MessageAttachmentRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.message_attachment.customer_id</code>.
     */
    public final TableField<MessageAttachmentRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message_attachment.message_id</code>.
     */
    public final TableField<MessageAttachmentRecord, Integer> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message_attachment.content_type</code>.
     */
    public final TableField<MessageAttachmentRecord, String> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.message_attachment.attachment_type</code>.
     */
    public final TableField<MessageAttachmentRecord, AttachmentType> ATTACHMENT_TYPE = createField(DSL.name("attachment_type"), SQLDataType.CLOB.nullable(false), this, "", new AttachmentTypeConverter());

    /**
     * The column <code>public.message_attachment.s3_key</code>.
     */
    public final TableField<MessageAttachmentRecord, String> S3_KEY = createField(DSL.name("s3_key"), SQLDataType.CLOB, this, "");

    private MessageAttachment(Name alias, Table<MessageAttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageAttachment(Name alias, Table<MessageAttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.message_attachment</code> table reference
     */
    public MessageAttachment(String alias) {
        this(DSL.name(alias), MESSAGE_ATTACHMENT);
    }

    /**
     * Create an aliased <code>public.message_attachment</code> table reference
     */
    public MessageAttachment(Name alias) {
        this(alias, MESSAGE_ATTACHMENT);
    }

    /**
     * Create a <code>public.message_attachment</code> table reference
     */
    public MessageAttachment() {
        this(DSL.name("message_attachment"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MessageAttachmentRecord, Integer> getIdentity() {
        return (Identity<MessageAttachmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageAttachmentRecord> getPrimaryKey() {
        return Internal.createUniqueKey(MessageAttachment.MESSAGE_ATTACHMENT, DSL.name("message_attachment_pkey"), new TableField[] { MessageAttachment.MESSAGE_ATTACHMENT.ID }, true);
    }

    @Override
    public List<UniqueKey<MessageAttachmentRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageAttachmentRecord>>asList(
              Internal.createUniqueKey(MessageAttachment.MESSAGE_ATTACHMENT, DSL.name("message_attachment_pkey"), new TableField[] { MessageAttachment.MESSAGE_ATTACHMENT.ID }, true)
        );
    }

    @Override
    public MessageAttachment as(String alias) {
        return new MessageAttachment(DSL.name(alias), this);
    }

    @Override
    public MessageAttachment as(Name alias) {
        return new MessageAttachment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageAttachment rename(String name) {
        return new MessageAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageAttachment rename(Name name) {
        return new MessageAttachment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, UUID, LocalDateTime, Integer, Integer, String, AttachmentType, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
