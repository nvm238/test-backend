/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.LabelRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Label extends TableImpl<LabelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.label</code>
     */
    public static final Label LABEL = new Label();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LabelRecord> getRecordType() {
        return LabelRecord.class;
    }

    /**
     * The column <code>public.label.id</code>.
     */
    public final TableField<LabelRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.label.public_id</code>.
     */
    public final TableField<LabelRecord, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.label.created</code>.
     */
    public final TableField<LabelRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.label.code</code>.
     */
    public final TableField<LabelRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.label.name</code>.
     */
    public final TableField<LabelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.label.active</code>.
     */
    public final TableField<LabelRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.label.fcm_api_key</code>.
     */
    public final TableField<LabelRecord, String> FCM_API_KEY = createField(DSL.name("fcm_api_key"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.label.sns_application_arn</code>.
     */
    public final TableField<LabelRecord, String> SNS_APPLICATION_ARN = createField(DSL.name("sns_application_arn"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.label.push_notification_text</code>.
     */
    public final TableField<LabelRecord, String> PUSH_NOTIFICATION_TEXT = createField(DSL.name("push_notification_text"), SQLDataType.CLOB, this, "");

    private Label(Name alias, Table<LabelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Label(Name alias, Table<LabelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.label</code> table reference
     */
    public Label(String alias) {
        this(DSL.name(alias), LABEL);
    }

    /**
     * Create an aliased <code>public.label</code> table reference
     */
    public Label(Name alias) {
        this(alias, LABEL);
    }

    /**
     * Create a <code>public.label</code> table reference
     */
    public Label() {
        this(DSL.name("label"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<LabelRecord, Integer> getIdentity() {
        return (Identity<LabelRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LabelRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Label.LABEL, DSL.name("label_pkey"), new TableField[] { Label.LABEL.ID }, true);
    }

    @Override
    public List<UniqueKey<LabelRecord>> getKeys() {
        return Arrays.<UniqueKey<LabelRecord>>asList(
              Internal.createUniqueKey(Label.LABEL, DSL.name("label_pkey"), new TableField[] { Label.LABEL.ID }, true)
        );
    }

    @Override
    public Label as(String alias) {
        return new Label(DSL.name(alias), this);
    }

    @Override
    public Label as(Name alias) {
        return new Label(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Label rename(String name) {
        return new Label(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Label rename(Name name) {
        return new Label(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, UUID, LocalDateTime, String, String, Boolean, String, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
