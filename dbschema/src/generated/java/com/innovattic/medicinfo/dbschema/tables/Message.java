/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.database.converter.JSONBConverter;
import com.innovattic.medicinfo.database.dto.ActionType;
import com.innovattic.medicinfo.database.generator.ActionTypeConverter;
import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.MessageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Message extends TableImpl<MessageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message</code>
     */
    public static final Message MESSAGE = new Message();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageRecord> getRecordType() {
        return MessageRecord.class;
    }

    /**
     * The column <code>public.message.id</code>.
     */
    public final TableField<MessageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.message.created</code>.
     */
    public final TableField<MessageRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.message.conversation_id</code>.
     */
    public final TableField<MessageRecord, Integer> CONVERSATION_ID = createField(DSL.name("conversation_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message.message</code>.
     */
    public final TableField<MessageRecord, String> MESSAGE_ = createField(DSL.name("message"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.message.user_id</code>.
     */
    public final TableField<MessageRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.message.public_id</code>.
     */
    public final TableField<MessageRecord, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.message.action_type</code>.
     */
    public final TableField<MessageRecord, ActionType> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.CLOB, this, "", new ActionTypeConverter());

    /**
     * The column <code>public.message.action_context</code>.
     */
    public final TableField<MessageRecord, String> ACTION_CONTEXT = createField(DSL.name("action_context"), SQLDataType.JSONB, this, "", new JSONBConverter());

    /**
     * The column <code>public.message.translated_message</code>.
     */
    public final TableField<MessageRecord, String> TRANSLATED_MESSAGE = createField(DSL.name("translated_message"), SQLDataType.CLOB, this, "");

    private Message(Name alias, Table<MessageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Message(Name alias, Table<MessageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.message</code> table reference
     */
    public Message(String alias) {
        this(DSL.name(alias), MESSAGE);
    }

    /**
     * Create an aliased <code>public.message</code> table reference
     */
    public Message(Name alias) {
        this(alias, MESSAGE);
    }

    /**
     * Create a <code>public.message</code> table reference
     */
    public Message() {
        this(DSL.name("message"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MessageRecord, Integer> getIdentity() {
        return (Identity<MessageRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MessageRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Message.MESSAGE, DSL.name("message_pkey"), new TableField[] { Message.MESSAGE.ID }, true);
    }

    @Override
    public List<UniqueKey<MessageRecord>> getKeys() {
        return Arrays.<UniqueKey<MessageRecord>>asList(
              Internal.createUniqueKey(Message.MESSAGE, DSL.name("message_pkey"), new TableField[] { Message.MESSAGE.ID }, true)
        );
    }

    @Override
    public Message as(String alias) {
        return new Message(DSL.name(alias), this);
    }

    @Override
    public Message as(Name alias) {
        return new Message(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(String name) {
        return new Message(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Message rename(Name name) {
        return new Message(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, LocalDateTime, Integer, String, Integer, UUID, ActionType, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
