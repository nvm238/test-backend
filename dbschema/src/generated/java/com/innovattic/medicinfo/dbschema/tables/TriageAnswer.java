/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.TriageAnswerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TriageAnswer extends TableImpl<TriageAnswerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.triage_answer</code>
     */
    public static final TriageAnswer TRIAGE_ANSWER = new TriageAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TriageAnswerRecord> getRecordType() {
        return TriageAnswerRecord.class;
    }

    /**
     * The column <code>public.triage_answer.id</code>.
     */
    public final TableField<TriageAnswerRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.triage_answer.created</code>.
     */
    public final TableField<TriageAnswerRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.triage_answer.question_id</code>.
     */
    public final TableField<TriageAnswerRecord, String> QUESTION_ID = createField(DSL.name("question_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.triage_answer.answer</code>.
     */
    public final TableField<TriageAnswerRecord, JSON> ANSWER = createField(DSL.name("answer"), SQLDataType.JSON.nullable(false), this, "");

    /**
     * The column <code>public.triage_answer.triage_status_id</code>.
     */
    public final TableField<TriageAnswerRecord, Integer> TRIAGE_STATUS_ID = createField(DSL.name("triage_status_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.triage_answer.raw_answer</code>.
     */
    public final TableField<TriageAnswerRecord, String> RAW_ANSWER = createField(DSL.name("raw_answer"), SQLDataType.CLOB.nullable(false), this, "");

    private TriageAnswer(Name alias, Table<TriageAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private TriageAnswer(Name alias, Table<TriageAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.triage_answer</code> table reference
     */
    public TriageAnswer(String alias) {
        this(DSL.name(alias), TRIAGE_ANSWER);
    }

    /**
     * Create an aliased <code>public.triage_answer</code> table reference
     */
    public TriageAnswer(Name alias) {
        this(alias, TRIAGE_ANSWER);
    }

    /**
     * Create a <code>public.triage_answer</code> table reference
     */
    public TriageAnswer() {
        this(DSL.name("triage_answer"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TriageAnswerRecord, Integer> getIdentity() {
        return (Identity<TriageAnswerRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TriageAnswerRecord> getPrimaryKey() {
        return Internal.createUniqueKey(TriageAnswer.TRIAGE_ANSWER, DSL.name("triage_answer_pkey"), new TableField[] { TriageAnswer.TRIAGE_ANSWER.ID }, true);
    }

    @Override
    public List<UniqueKey<TriageAnswerRecord>> getKeys() {
        return Arrays.<UniqueKey<TriageAnswerRecord>>asList(
              Internal.createUniqueKey(TriageAnswer.TRIAGE_ANSWER, DSL.name("triage_answer_pkey"), new TableField[] { TriageAnswer.TRIAGE_ANSWER.ID }, true)
        );
    }

    @Override
    public TriageAnswer as(String alias) {
        return new TriageAnswer(DSL.name(alias), this);
    }

    @Override
    public TriageAnswer as(Name alias) {
        return new TriageAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TriageAnswer rename(String name) {
        return new TriageAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TriageAnswer rename(Name name) {
        return new TriageAnswer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, LocalDateTime, String, JSON, Integer, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
