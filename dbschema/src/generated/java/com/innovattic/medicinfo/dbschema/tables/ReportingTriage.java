/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.database.dto.TriageProgress;
import com.innovattic.medicinfo.database.generator.TriageStatusConverter;
import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.ReportingTriageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportingTriage extends TableImpl<ReportingTriageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reporting_triage</code>
     */
    public static final ReportingTriage REPORTING_TRIAGE = new ReportingTriage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportingTriageRecord> getRecordType() {
        return ReportingTriageRecord.class;
    }

    /**
     * The column <code>public.reporting_triage.id</code>.
     */
    public final TableField<ReportingTriageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.label_code</code>.
     */
    public final TableField<ReportingTriageRecord, String> LABEL_CODE = createField(DSL.name("label_code"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.customer_id</code>.
     */
    public final TableField<ReportingTriageRecord, UUID> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.chat_id</code>.
     */
    public final TableField<ReportingTriageRecord, UUID> CHAT_ID = createField(DSL.name("chat_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.created</code>.
     */
    public final TableField<ReportingTriageRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.ended</code>.
     */
    public final TableField<ReportingTriageRecord, LocalDateTime> ENDED = createField(DSL.name("ended"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.reporting_triage.medical_area</code>.
     */
    public final TableField<ReportingTriageRecord, String> MEDICAL_AREA = createField(DSL.name("medical_area"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.reporting_triage.is_self_triage</code>.
     */
    public final TableField<ReportingTriageRecord, Boolean> IS_SELF_TRIAGE = createField(DSL.name("is_self_triage"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.reporting_triage.version_number</code>.
     */
    public final TableField<ReportingTriageRecord, Integer> VERSION_NUMBER = createField(DSL.name("version_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.abandoned</code>.
     */
    public final TableField<ReportingTriageRecord, Boolean> ABANDONED = createField(DSL.name("abandoned"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.reporting_triage.end_reason</code>.
     */
    public final TableField<ReportingTriageRecord, String> END_REASON = createField(DSL.name("end_reason"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.reporting_triage.urgency</code>.
     */
    public final TableField<ReportingTriageRecord, String> URGENCY = createField(DSL.name("urgency"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.reporting_triage.triage_state</code>.
     */
    public final TableField<ReportingTriageRecord, TriageProgress> TRIAGE_STATE = createField(DSL.name("triage_state"), SQLDataType.CLOB, this, "", new TriageStatusConverter());

    /**
     * The column <code>public.reporting_triage.progress_percentage</code>.
     */
    public final TableField<ReportingTriageRecord, Integer> PROGRESS_PERCENTAGE = createField(DSL.name("progress_percentage"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.reporting_triage.filled_questionnaire_other</code>.
     */
    public final TableField<ReportingTriageRecord, Boolean> FILLED_QUESTIONNAIRE_OTHER = createField(DSL.name("filled_questionnaire_other"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private ReportingTriage(Name alias, Table<ReportingTriageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReportingTriage(Name alias, Table<ReportingTriageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reporting_triage</code> table reference
     */
    public ReportingTriage(String alias) {
        this(DSL.name(alias), REPORTING_TRIAGE);
    }

    /**
     * Create an aliased <code>public.reporting_triage</code> table reference
     */
    public ReportingTriage(Name alias) {
        this(alias, REPORTING_TRIAGE);
    }

    /**
     * Create a <code>public.reporting_triage</code> table reference
     */
    public ReportingTriage() {
        this(DSL.name("reporting_triage"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReportingTriageRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ReportingTriage.REPORTING_TRIAGE, DSL.name("reporting_triage_pkey"), new TableField[] { ReportingTriage.REPORTING_TRIAGE.ID }, true);
    }

    @Override
    public List<UniqueKey<ReportingTriageRecord>> getKeys() {
        return Arrays.<UniqueKey<ReportingTriageRecord>>asList(
              Internal.createUniqueKey(ReportingTriage.REPORTING_TRIAGE, DSL.name("reporting_triage_pkey"), new TableField[] { ReportingTriage.REPORTING_TRIAGE.ID }, true)
        );
    }

    @Override
    public ReportingTriage as(String alias) {
        return new ReportingTriage(DSL.name(alias), this);
    }

    @Override
    public ReportingTriage as(Name alias) {
        return new ReportingTriage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportingTriage rename(String name) {
        return new ReportingTriage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReportingTriage rename(Name name) {
        return new ReportingTriage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, UUID, UUID, LocalDateTime, LocalDateTime, String, Boolean, Integer, Boolean, String, String, TriageProgress, Integer, Boolean> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
