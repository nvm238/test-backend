/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.database.dto.ConversationStatus;
import com.innovattic.medicinfo.database.generator.ConversationStatusConverter;
import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.ConversationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Conversation extends TableImpl<ConversationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.conversation</code>
     */
    public static final Conversation CONVERSATION = new Conversation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConversationRecord> getRecordType() {
        return ConversationRecord.class;
    }

    /**
     * The column <code>public.conversation.id</code>.
     */
    public final TableField<ConversationRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.conversation.public_id</code>.
     */
    public final TableField<ConversationRecord, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.conversation.created</code>.
     */
    public final TableField<ConversationRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.conversation.label_id</code>.
     */
    public final TableField<ConversationRecord, Integer> LABEL_ID = createField(DSL.name("label_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.conversation.customer_id</code>.
     */
    public final TableField<ConversationRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.conversation.delivered_to_customer</code>.
     */
    public final TableField<ConversationRecord, LocalDateTime> DELIVERED_TO_CUSTOMER = createField(DSL.name("delivered_to_customer"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.conversation.delivered_to_employee</code>.
     */
    public final TableField<ConversationRecord, LocalDateTime> DELIVERED_TO_EMPLOYEE = createField(DSL.name("delivered_to_employee"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.conversation.read_by_customer</code>.
     */
    public final TableField<ConversationRecord, LocalDateTime> READ_BY_CUSTOMER = createField(DSL.name("read_by_customer"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.conversation.read_by_employee</code>.
     */
    public final TableField<ConversationRecord, LocalDateTime> READ_BY_EMPLOYEE = createField(DSL.name("read_by_employee"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.conversation.status</code>.
     */
    public final TableField<ConversationRecord, ConversationStatus> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false), this, "", new ConversationStatusConverter());

    /**
     * The column <code>public.conversation.language</code>.
     */
    public final TableField<ConversationRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.CLOB, this, "");

    private Conversation(Name alias, Table<ConversationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conversation(Name alias, Table<ConversationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.conversation</code> table reference
     */
    public Conversation(String alias) {
        this(DSL.name(alias), CONVERSATION);
    }

    /**
     * Create an aliased <code>public.conversation</code> table reference
     */
    public Conversation(Name alias) {
        this(alias, CONVERSATION);
    }

    /**
     * Create a <code>public.conversation</code> table reference
     */
    public Conversation() {
        this(DSL.name("conversation"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ConversationRecord, Integer> getIdentity() {
        return (Identity<ConversationRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ConversationRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Conversation.CONVERSATION, DSL.name("conversation_pkey"), new TableField[] { Conversation.CONVERSATION.ID }, true);
    }

    @Override
    public List<UniqueKey<ConversationRecord>> getKeys() {
        return Arrays.<UniqueKey<ConversationRecord>>asList(
              Internal.createUniqueKey(Conversation.CONVERSATION, DSL.name("conversation_pkey"), new TableField[] { Conversation.CONVERSATION.ID }, true)
        );
    }

    @Override
    public Conversation as(String alias) {
        return new Conversation(DSL.name(alias), this);
    }

    @Override
    public Conversation as(Name alias) {
        return new Conversation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(String name) {
        return new Conversation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conversation rename(Name name) {
        return new Conversation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, UUID, LocalDateTime, Integer, Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, ConversationStatus, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
