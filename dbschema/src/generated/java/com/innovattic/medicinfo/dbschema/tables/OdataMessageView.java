/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.OdataMessageViewRecord;

import java.time.LocalDateTime;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OdataMessageView extends TableImpl<OdataMessageViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.odata_message_view</code>
     */
    public static final OdataMessageView ODATA_MESSAGE_VIEW = new OdataMessageView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OdataMessageViewRecord> getRecordType() {
        return OdataMessageViewRecord.class;
    }

    /**
     * The column <code>public.odata_message_view.id</code>.
     */
    public final TableField<OdataMessageViewRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.odata_message_view.conversation_id</code>.
     */
    public final TableField<OdataMessageViewRecord, String> CONVERSATION_ID = createField(DSL.name("conversation_id"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.odata_message_view.sender_id</code>.
     */
    public final TableField<OdataMessageViewRecord, String> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.odata_message_view.sender_is_customer</code>.
     */
    public final TableField<OdataMessageViewRecord, Boolean> SENDER_IS_CUSTOMER = createField(DSL.name("sender_is_customer"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.odata_message_view.received_by_receiver</code>.
     */
    public final TableField<OdataMessageViewRecord, Boolean> RECEIVED_BY_RECEIVER = createField(DSL.name("received_by_receiver"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.odata_message_view.read_by_receiver</code>.
     */
    public final TableField<OdataMessageViewRecord, Boolean> READ_BY_RECEIVER = createField(DSL.name("read_by_receiver"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.odata_message_view.contains_attachment</code>.
     */
    public final TableField<OdataMessageViewRecord, Boolean> CONTAINS_ATTACHMENT = createField(DSL.name("contains_attachment"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.odata_message_view.send_at</code>.
     */
    public final TableField<OdataMessageViewRecord, LocalDateTime> SEND_AT = createField(DSL.name("send_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.odata_message_view.message</code>.
     */
    public final TableField<OdataMessageViewRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.odata_message_view.translated_message</code>.
     */
    public final TableField<OdataMessageViewRecord, String> TRANSLATED_MESSAGE = createField(DSL.name("translated_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.odata_message_view.is_system_message</code>.
     */
    public final TableField<OdataMessageViewRecord, Boolean> IS_SYSTEM_MESSAGE = createField(DSL.name("is_system_message"), SQLDataType.BOOLEAN, this, "");

    private OdataMessageView(Name alias, Table<OdataMessageViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private OdataMessageView(Name alias, Table<OdataMessageViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"odata_message_view\" as  SELECT (message.public_id)::character varying(50) AS id,\n    (conversation.public_id)::character varying(50) AS conversation_id,\n    (\"user\".public_id)::character varying(50) AS sender_id,\n        CASE\n            WHEN (\"user\".id = conversation.customer_id) THEN true\n            ELSE false\n        END AS sender_is_customer,\n        CASE\n            WHEN (\"user\".role = 'customer'::text) THEN\n            CASE\n                WHEN (message.created <= conversation.delivered_to_employee) THEN true\n                ELSE false\n            END\n            ELSE\n            CASE\n                WHEN (message.created <= conversation.delivered_to_customer) THEN true\n                ELSE false\n            END\n        END AS received_by_receiver,\n        CASE\n            WHEN (\"user\".role = 'customer'::text) THEN\n            CASE\n                WHEN (message.created <= conversation.read_by_employee) THEN true\n                ELSE false\n            END\n            ELSE\n            CASE\n                WHEN (message.created <= conversation.read_by_customer) THEN true\n                ELSE false\n            END\n        END AS read_by_receiver,\n        CASE\n            WHEN (message_attachment.id IS NOT NULL) THEN true\n            ELSE false\n        END AS contains_attachment,\n    message.created AS send_at,\n    message.message,\n    message.translated_message,\n        CASE\n            WHEN (\"user\".role = 'admin'::text) THEN true\n            ELSE false\n        END AS is_system_message\n   FROM (((message\n     LEFT JOIN conversation ON ((conversation.id = message.conversation_id)))\n     LEFT JOIN \"user\" ON ((\"user\".id = message.user_id)))\n     LEFT JOIN message_attachment ON ((message_attachment.message_id = message.id)));"));
    }

    /**
     * Create an aliased <code>public.odata_message_view</code> table reference
     */
    public OdataMessageView(String alias) {
        this(DSL.name(alias), ODATA_MESSAGE_VIEW);
    }

    /**
     * Create an aliased <code>public.odata_message_view</code> table reference
     */
    public OdataMessageView(Name alias) {
        this(alias, ODATA_MESSAGE_VIEW);
    }

    /**
     * Create a <code>public.odata_message_view</code> table reference
     */
    public OdataMessageView() {
        this(DSL.name("odata_message_view"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public OdataMessageView as(String alias) {
        return new OdataMessageView(DSL.name(alias), this);
    }

    @Override
    public OdataMessageView as(Name alias) {
        return new OdataMessageView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OdataMessageView rename(String name) {
        return new OdataMessageView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OdataMessageView rename(Name name) {
        return new OdataMessageView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<String, String, String, Boolean, Boolean, Boolean, Boolean, LocalDateTime, String, String, Boolean> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
