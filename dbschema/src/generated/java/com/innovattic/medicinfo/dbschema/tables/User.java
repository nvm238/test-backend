/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.database.dto.Gender;
import com.innovattic.medicinfo.database.dto.UserRole;
import com.innovattic.medicinfo.database.generator.GenderConverter;
import com.innovattic.medicinfo.database.generator.UserRoleConverter;
import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>public.user.id</code>.
     */
    public final TableField<UserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user.public_id</code>.
     */
    public final TableField<UserRecord, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user.created</code>.
     */
    public final TableField<UserRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.user.label_id</code>.
     */
    public final TableField<UserRecord, Integer> LABEL_ID = createField(DSL.name("label_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user.salesforce_id</code>.
     */
    public final TableField<UserRecord, String> SALESFORCE_ID = createField(DSL.name("salesforce_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.role</code>.
     */
    public final TableField<UserRecord, UserRole> ROLE = createField(DSL.name("role"), SQLDataType.CLOB.nullable(false), this, "", new UserRoleConverter());

    /**
     * The column <code>public.user.name</code>.
     */
    public final TableField<UserRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user.gender</code>.
     */
    public final TableField<UserRecord, Gender> GENDER = createField(DSL.name("gender"), SQLDataType.CLOB, this, "", new GenderConverter());

    /**
     * The column <code>public.user.age</code>.
     */
    public final TableField<UserRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user.email</code>.
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.is_insured</code>.
     */
    public final TableField<UserRecord, Boolean> IS_INSURED = createField(DSL.name("is_insured"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.user.device_token</code>.
     */
    public final TableField<UserRecord, String> DEVICE_TOKEN = createField(DSL.name("device_token"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.sns_endpoint_arn</code>.
     */
    public final TableField<UserRecord, String> SNS_ENDPOINT_ARN = createField(DSL.name("sns_endpoint_arn"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.privacy_version</code>.
     */
    public final TableField<UserRecord, String> PRIVACY_VERSION = createField(DSL.name("privacy_version"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.privacy_version_accepted_at</code>.
     */
    public final TableField<UserRecord, LocalDateTime> PRIVACY_VERSION_ACCEPTED_AT = createField(DSL.name("privacy_version_accepted_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user.birthdate</code>.
     */
    public final TableField<UserRecord, LocalDateTime> BIRTHDATE = createField(DSL.name("birthdate"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.user.migrated_from</code>.
     */
    public final TableField<UserRecord, String> MIGRATED_FROM = createField(DSL.name("migrated_from"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.phone_number</code>.
     */
    public final TableField<UserRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.postal_code</code>.
     */
    public final TableField<UserRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.house_number</code>.
     */
    public final TableField<UserRecord, String> HOUSE_NUMBER = createField(DSL.name("house_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.entry_type</code>.
     */
    public final TableField<UserRecord, String> ENTRY_TYPE = createField(DSL.name("entry_type"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.general_practice</code>.
     */
    public final TableField<UserRecord, String> GENERAL_PRACTICE = createField(DSL.name("general_practice"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.general_practice_agb_code</code>.
     */
    public final TableField<UserRecord, String> GENERAL_PRACTICE_AGB_CODE = createField(DSL.name("general_practice_agb_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.general_practice_center</code>.
     */
    public final TableField<UserRecord, String> GENERAL_PRACTICE_CENTER = createField(DSL.name("general_practice_center"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.general_practice_center_agb_code</code>.
     */
    public final TableField<UserRecord, String> GENERAL_PRACTICE_CENTER_AGB_CODE = createField(DSL.name("general_practice_center_agb_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.holiday_destination</code>.
     */
    public final TableField<UserRecord, String> HOLIDAY_DESTINATION = createField(DSL.name("holiday_destination"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.onboarding_details_added</code>.
     */
    public final TableField<UserRecord, Boolean> ONBOARDING_DETAILS_ADDED = createField(DSL.name("onboarding_details_added"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.user.shelter_location_id</code>.
     */
    public final TableField<UserRecord, String> SHELTER_LOCATION_ID = createField(DSL.name("shelter_location_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.user.shelter_location_name</code>.
     */
    public final TableField<UserRecord, String> SHELTER_LOCATION_NAME = createField(DSL.name("shelter_location_name"), SQLDataType.CLOB, this, "");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>public.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<UserRecord, Integer> getIdentity() {
        return (Identity<UserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true);
    }

    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(
              Internal.createUniqueKey(User.USER, DSL.name("user_pkey"), new TableField[] { User.USER.ID }, true)
        );
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }
}
