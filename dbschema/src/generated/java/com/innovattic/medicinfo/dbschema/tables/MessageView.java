/*
 * This file is generated by jOOQ.
 */
package com.innovattic.medicinfo.dbschema.tables;


import com.innovattic.medicinfo.database.converter.JSONBConverter;
import com.innovattic.medicinfo.database.dto.ActionType;
import com.innovattic.medicinfo.database.dto.AttachmentType;
import com.innovattic.medicinfo.database.dto.UserRole;
import com.innovattic.medicinfo.database.generator.ActionTypeConverter;
import com.innovattic.medicinfo.database.generator.AttachmentTypeConverter;
import com.innovattic.medicinfo.database.generator.UserRoleConverter;
import com.innovattic.medicinfo.dbschema.Public;
import com.innovattic.medicinfo.dbschema.tables.records.MessageViewRecord;

import java.time.LocalDateTime;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.14.16"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MessageView extends TableImpl<MessageViewRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.message_view</code>
     */
    public static final MessageView MESSAGE_VIEW = new MessageView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MessageViewRecord> getRecordType() {
        return MessageViewRecord.class;
    }

    /**
     * The column <code>public.message_view.id</code>.
     */
    public final TableField<MessageViewRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.message_view.public_id</code>.
     */
    public final TableField<MessageViewRecord, UUID> PUBLIC_ID = createField(DSL.name("public_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_view.created</code>.
     */
    public final TableField<MessageViewRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.message_view.conversation_id</code>.
     */
    public final TableField<MessageViewRecord, Integer> CONVERSATION_ID = createField(DSL.name("conversation_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.message_view.message</code>.
     */
    public final TableField<MessageViewRecord, String> MESSAGE = createField(DSL.name("message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_view.translated_message</code>.
     */
    public final TableField<MessageViewRecord, String> TRANSLATED_MESSAGE = createField(DSL.name("translated_message"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_view.action_type</code>.
     */
    public final TableField<MessageViewRecord, ActionType> ACTION_TYPE = createField(DSL.name("action_type"), SQLDataType.CLOB, this, "", new ActionTypeConverter());

    /**
     * The column <code>public.message_view.action_context</code>.
     */
    public final TableField<MessageViewRecord, String> ACTION_CONTEXT = createField(DSL.name("action_context"), SQLDataType.JSONB, this, "", new JSONBConverter());

    /**
     * The column <code>public.message_view.user_public_id</code>.
     */
    public final TableField<MessageViewRecord, UUID> USER_PUBLIC_ID = createField(DSL.name("user_public_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_view.user_name</code>.
     */
    public final TableField<MessageViewRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.message_view.user_role</code>.
     */
    public final TableField<MessageViewRecord, UserRole> USER_ROLE = createField(DSL.name("user_role"), SQLDataType.CLOB, this, "", new UserRoleConverter());

    /**
     * The column <code>public.message_view.attachment_id</code>.
     */
    public final TableField<MessageViewRecord, UUID> ATTACHMENT_ID = createField(DSL.name("attachment_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.message_view.attachment_content_type</code>.
     */
    public final TableField<MessageViewRecord, AttachmentType> ATTACHMENT_CONTENT_TYPE = createField(DSL.name("attachment_content_type"), SQLDataType.CLOB, this, "", new AttachmentTypeConverter());

    /**
     * The column <code>public.message_view.conversation_public_id</code>.
     */
    public final TableField<MessageViewRecord, UUID> CONVERSATION_PUBLIC_ID = createField(DSL.name("conversation_public_id"), SQLDataType.UUID, this, "");

    private MessageView(Name alias, Table<MessageViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private MessageView(Name alias, Table<MessageViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"message_view\" as  SELECT message.id,\n    message.public_id,\n    message.created,\n    message.conversation_id,\n    message.message,\n    message.translated_message,\n    message.action_type,\n    message.action_context,\n    \"user\".public_id AS user_public_id,\n    \"user\".name AS user_name,\n    \"user\".role AS user_role,\n    message_attachment.public_id AS attachment_id,\n    message_attachment.attachment_type AS attachment_content_type,\n    conversation.public_id AS conversation_public_id\n   FROM (((message\n     LEFT JOIN \"user\" ON ((message.user_id = \"user\".id)))\n     LEFT JOIN message_attachment ON ((message.id = message_attachment.message_id)))\n     LEFT JOIN conversation ON ((conversation.id = message.conversation_id)));"));
    }

    /**
     * Create an aliased <code>public.message_view</code> table reference
     */
    public MessageView(String alias) {
        this(DSL.name(alias), MESSAGE_VIEW);
    }

    /**
     * Create an aliased <code>public.message_view</code> table reference
     */
    public MessageView(Name alias) {
        this(alias, MESSAGE_VIEW);
    }

    /**
     * Create a <code>public.message_view</code> table reference
     */
    public MessageView() {
        this(DSL.name("message_view"), null);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public MessageView as(String alias) {
        return new MessageView(DSL.name(alias), this);
    }

    @Override
    public MessageView as(Name alias) {
        return new MessageView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageView rename(String name) {
        return new MessageView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MessageView rename(Name name) {
        return new MessageView(name, null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, UUID, LocalDateTime, Integer, String, String, ActionType, String, UUID, String, UserRole, UUID, AttachmentType, UUID> fieldsRow() {
        return (Row14) super.fieldsRow();
    }
}
