AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ActiveProfile:
    Type: String
  EnvironmentName:
    Type: String
  HostedZoneName:
    Type: String
  DomainName:
    Type: String
  InstanceType:
    Type: String
  CertificateArn:
    Type: String
  EbAppName:
    Type: String
    Default: "medicinfo-server"
Conditions:
  IsProd: !Equals
    - !Ref EnvironmentName
    - prod
Resources:
  ElasticBeanstalkEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    DependsOn: Ec2InstanceProfile
    Properties:
      ApplicationName: !Ref EbAppName
      CNAMEPrefix: !Join [ '', [ 'medicinfo-server-', !Ref EnvironmentName ] ]
      EnvironmentName: !Join [ '', [ 'medicinfo-server-', !Ref EnvironmentName ] ]
      OptionSettings:
        # basic aws settings
        - Namespace: 'aws:ec2:instances'
          OptionName: InstanceTypes
          Value: !Ref InstanceType
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: IamInstanceProfile
          Value: !Ref Ec2InstanceProfile
        - Namespace: 'aws:autoscaling:launchconfiguration'
          OptionName: SecurityGroups
          # default connects the app to the RDS database
          Value: 'default'
        - Namespace: 'aws:autoscaling:asg'
          OptionName: MaxSize
          Value: 2
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: StreamLogs
          Value: true
        - Namespace: 'aws:elasticbeanstalk:cloudwatch:logs'
          OptionName: RetentionInDays
          Value: 30
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: EnvironmentType
          Value: LoadBalanced
        - Namespace: 'aws:elasticbeanstalk:environment'
          OptionName: LoadBalancerType
          Value: Application
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: Protocol
          Value: HTTPS
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: SSLCertificateArns
          Value: !Ref CertificateArn
        - Namespace: 'aws:elbv2:listener:443'
          OptionName: SSLPolicy
          Value: 'ELBSecurityPolicy-TLS-1-2-Ext-2018-06'
        - Namespace: 'aws:autoscaling:updatepolicy:rollingupdate'
          OptionName: RollingUpdateEnabled
          Value: true
        - Namespace: 'aws:autoscaling:updatepolicy:rollingupdate'
          OptionName: RollingUpdateType
          Value: Health
        # For prod, we want a zero-downtime deploy; with RollingWithAdditionalBatch, EB starts up additional instances,
        # waits for them to be healthy, then turns off old instances.
        # For other stacks, just update in-place for quick deployment.
        - Namespace: 'aws:elasticbeanstalk:command'
          OptionName: DeploymentPolicy
          Value: !If [IsProd, 'RollingWithAdditionalBatch', 'AllAtOnce']
        - Namespace: 'aws:elasticbeanstalk:managedactions'
          OptionName: ManagedActionsEnabled
          Value: True
        - Namespace: 'aws:elasticbeanstalk:managedactions'
          OptionName: PreferredStartTime
          Value: Sun:02:00
        - Namespace: 'aws:elasticbeanstalk:managedactions'
          OptionName: ServiceRoleForManagedUpdates
          Value: AWSServiceRoleForElasticBeanstalkManagedUpdates
        - Namespace: 'aws:elasticbeanstalk:managedactions:platformupdate'
          OptionName: UpdateLevel
          Value: minor
        - Namespace: 'aws:elasticbeanstalk:managedactions:platformupdate'
          OptionName: InstanceRefreshEnabled
          Value: True
        - Namespace: 'aws:elasticbeanstalk:healthreporting:system'
          OptionName: SystemType
          Value: enhanced
        # 1. Publish number of 'severe' instances to Cloudwatch for monitoring
        # 2. Ignore 4xx errors when determining application health. Access-denied errors are most probably
        # the fault of a client, there's nothing we can or should do about it.
        - Namespace: 'aws:elasticbeanstalk:healthreporting:system'
          OptionName: ConfigDocument
          # json in yaml.. :(
          Value: >
            {
              "Version": 1,
              "CloudWatchMetrics": {
                "Environment": {
                  "InstancesSevere": 60
                }
              },
              "Rules": {
                "Environment": {
                  "Application": {
                    "ApplicationRequests4xx": {
                      "Enabled": false
                    }
                  },
                  "ELB": {
                    "ELBRequests4xx": {
                      "Enabled": false
                    }
                  }
                }
              }
            }
        - Namespace: 'aws:elasticbeanstalk:application:environment'
          OptionName: 'SPRING_PROFILES_ACTIVE'
          Value: !Join [ ',', [ !Ref ActiveProfile, 'aws' ] ]
        - Namespace: 'aws:elasticbeanstalk:environment:process:default'
          OptionName: 'HealthCheckPath'
          Value: '/api/info/health'
        # Autoscaling is done by default on the outgoing network traffic. We change this to use CPU usage.
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: MeasureName
          Value: CPUUtilization
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: Unit
          Value: Percent
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: LowerThreshold
          Value: 25
        - Namespace: 'aws:autoscaling:trigger'
          OptionName: UpperThreshold
          Value: 75
      # This is a *prefix* of a platform ARN.
      # AWS will periodically update their platforms, and directly prune the older version.
      # This will just take the latest version at creation time.
      # see: https://forums.aws.amazon.com/thread.jspa?threadID=252614
      SolutionStackName: arn:aws:elasticbeanstalk:eu-central-1::platform/Corretto 11 running on 64bit Amazon Linux 2
  DNS:
    Type: AWS::Route53::RecordSetGroup
    DependsOn:
      - ElasticBeanstalkEnvironment
    Properties:
      HostedZoneName: !Ref HostedZoneName
      RecordSets:
        - Name: !Join [ '', [ !Ref DomainName, '.' ]]
          Type: CNAME
          TTL: 600
          ResourceRecords:
            - !GetAtt ElasticBeanstalkEnvironment.EndpointURL
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      # allow ec2 to take on this role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        # allow pushing custom metrics to cloudwatch
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      RoleName: !Join ['', ['ec2-role-for-', !Ref EnvironmentName]]
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: Ec2Role
    Properties:
      InstanceProfileName: !Join ['', ['ec2-profile-for-', !Ref EnvironmentName]]
      Roles:
        - !Ref Ec2Role

  # Monitoring
  MonitoringTopic:
    Type: AWS::SNS::Topic
  MonitoringTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: MonitoringTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudwatchPublishAlarms
            Effect: Allow
            Principal:
              Service:
                - "cloudwatch.amazonaws.com"
            Action: sns:Publish
            Resource: "*"
      Topics:
        - !Ref MonitoringTopic
  # only for prod: deliver notifications via email
  # this needs manual confirmation of the email adres
  MonitoringSubscription:
    # We should only monitor prod; but for now let's also monitor acc
    #Condition: IsProd
    Type: AWS::SNS::Subscription
    Properties:
      # TODO: change to support@innovattic.com once this works
      Endpoint: medicinfo-sysadmin@innovattic.com
      Protocol: email
      TopicArn: !Ref MonitoringTopic
  # alarm on elastic beanstalk environment state
  EnvNotOkAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MonitoringTopic
      # also send out notification when we get back to normal
      OKActions:
        - !Ref MonitoringTopic
      AlarmDescription: 'Environment not healthy'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      # 20 = "Degraded"; see https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/health-enhanced-cloudwatch.html
      Threshold: 20
      Namespace: AWS/ElasticBeanstalk
      MetricName: EnvironmentHealth
      # notify only when the environment is unhealthy for this number of minutes;
      # this prevents monitoring checks to go off when the environment is scaling up
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Period: 60
      Statistic: Maximum
      Dimensions:
        - Name: EnvironmentName
          Value: !Join [ '', [ 'medicinfo-server-', !Ref EnvironmentName ] ]
  # early warning: when one or more instances are in severe state (not necessarily the whole environment)
  InstancesInvalidStateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref MonitoringTopic
      OKActions:
        - !Ref MonitoringTopic
      AlarmDescription: 'One or more EC2 instances are in state SEVERE'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Namespace: AWS/ElasticBeanstalk
      MetricName: InstancesSevere
      # see above; ignore temporary failures due to scaling up
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Period: 60
      Statistic: Maximum
      Dimensions:
        - Name: EnvironmentName
          Value: !Join [ '', [ 'medicinfo-server-', !Ref EnvironmentName ] ]
